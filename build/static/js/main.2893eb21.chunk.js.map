{"version":3,"sources":["utils/appFunc.js","routers/routes.js","routers/router.js","index.js","routers/utils.js"],"names":["pathJoin","pathArray","conjunctPath","map","path","indexOf","split","filter","item","join","goto","route","type","console","log","browserHistory","push","window","location","href","routes","component","asyncComponent","loader","pathname","fmxlyPathname","RouteWithSubRoutes","exact","render","props","App","Fragment","i","key","Root","basename","forceRefresh","history","ReactDOM","document","getElementById","createBrowserHistory","options","Loadable","loading","error"],"mappings":"2GAAA,2EAMaA,EAAW,SAACC,GACrB,IAAIC,EAAeD,EACdE,IAAI,SAACC,GACF,OAAKA,GAGsB,IAAvBA,EAAKC,QAAQ,KACND,EAEJA,EAAKE,MAAM,KAAKC,OAAO,SAACC,GAAD,OAAUA,IAL7B,KAOdC,OACAH,MAAM,KACNG,KAAK,KAEV,MAAwB,MAApBP,EAAa,GACNA,EAEA,IAAMA,GA6BRQ,EAAO,SAACC,GAAsB,IAAfC,EAAc,uDAAP,EAE/B,OADAC,QAAQC,IAAIC,KACJH,GACJ,KAAK,EACDG,IAAeC,KAAKL,GACpB,MACJ,KAAK,EACDM,OAAOC,SAASC,KAAOR,K,oJCtCpBS,EAnBA,CACX,CACIhB,KAAM,IACNiB,UAAWC,YAAe,CACtBC,OAAQ,kBAAM,iCAEpB,CACEnB,KAAM,QACNiB,UAAWC,YAAe,CACtBC,OAAQ,kBAAM,iCAEpB,CACEnB,KAAM,UACNiB,UAAWC,YAAe,CACtBC,OAAQ,kBAAM,kC,eCXtBC,EAAW,IAEXA,EADAP,OAAOQ,cACIR,OAAOQ,cAEP,GAGf,IAAMC,EAAqB,SAACf,GACxB,OACI,kBAAC,IAAD,CAAOgB,OAAK,EACRvB,KAAMJ,YAAS,CAACwB,EAAUb,EAAMP,OAChCwB,OAAQ,SAACC,GACL,OAAQ,kBAAClB,EAAMU,UAAP,iBAAqBQ,EAArB,CAA4BT,OAAQT,EAAMS,cAK5DU,EAAM,WACR,OACI,kBAAC,IAAMC,SAAP,KACKX,EAAOjB,IAAI,SAACQ,EAAOqB,GAAR,OAAe,kBAAC,EAAD,eAAoBC,IAAKD,GAAOrB,QAWxDuB,EAPF,WACT,OACI,kBAAC,IAAD,CAAQC,SAAUX,EAAUY,cAAc,EAAMC,QAAStB,KACrD,kBAAC,EAAD,QC1BZuB,IAASV,OAAO,kBAAC,EAAD,MAASW,SAASC,eAAe,U,+TCJ1C,IAAMzB,EAAiB0B,cAyBfnB,IAZQ,SAACoB,GACpB,OAAOC,I,qVAAS,CAAD,CACXC,QAAS,SAACf,GAIN,OAHIA,EAAMgB,OACNhC,QAAQgC,MAAMhB,EAAMgB,OAEjB,OAERH,O","file":"static/js/main.2893eb21.chunk.js","sourcesContent":["import { browserHistory } from 'Routers/utils';\n/**\n * 拼接地址\n *\n * @param {[string]} pathArray 地址数组\n */\nexport const pathJoin = (pathArray) => {\n    let conjunctPath = pathArray\n        .map((path) => {\n            if (!path) {\n                return '';\n            }\n            if (path.indexOf('/') === -1) {\n                return path;\n            }\n            return path.split('/').filter((item) => item);\n        })\n        .join()\n        .split(',')\n        .join('/');\n\n    if (conjunctPath[0] === '/') {\n        return conjunctPath;\n    } else {\n        return '/' + conjunctPath;\n    }\n}\n/**\n * [serializeObject 以&连接对象的键值，并以字符串返回]\n *\n * @param   {Object}    obj        [输入对象]\n * @returns {String}               [返回转换后的字符串]\n */\nexport const serializeObject = (obj) => {\n    if (Object.prototype.toString.call(obj) !== '[object Object]') return obj;\n    let resultArray = [],\n        separator = '&';\n    for (let prop in obj) {\n        if (Object.prototype.toString.call((obj[prop])) === '[object Array]') {\n            let toPush = [];\n            for (let i = 0; i < obj[prop].length; i++) {\n                const value = obj[prop][i];\n                toPush.push(prop + '=' + (value === undefined ? '' : value));\n            }\n            resultArray.push(toPush.join(separator));\n        } else {\n            const value = obj[prop];\n            resultArray.push(prop + '=' + (value === undefined ? '' : value));\n        }\n    }\n    return resultArray.join(separator);\n}\n// {route, params, type}\nexport const goto = (route, type = 1 ) => {\n    console.log(browserHistory);\n    switch (type) {\n        case 1:\n            browserHistory.push(route);\n            break;\n        case 2:\n            window.location.href = route;\n            break;\n        default:\n            break;\n    }\n    // function getTargetRoute({ route, params, type, project } = {}){\n    //     let targetRoute = '', // 拼接好的path + query\n    //         queryString = serializeObject(params); // params转字符串\n    //     if (!window.path) { // 开发环境\n    //         targetRoute = pathJoin(['/', route]);\n    //     } else if (project === 'browser' && window.path === 'ksweb') { // m站 生产环境\n    //         targetRoute = pathJoin(['/', route]);\n    //     } else if (window.path === 'kspage' && project === 'story') { // 活动生产环境\n    //         targetRoute = pathJoin(['/ksweb', route]);\n    //     } else if (project === 'story' || project === 'browser') { // 所有项目的开发环境、公众号项目、m站项目gamma、test环境\n    //         targetRoute = pathJoin([window.path, route]);\n    //     } else if (project === 'fmxly') {\n    //         if (window.fmxlyPathname) {\n    //             targetRoute = pathJoin([window.fmxlyPathname, route]);\n    //         } else {\n    //             const fmxlyPathnameMAP = {\n    //                 'mtest': '/fmxlytest',\n    //                 'gtest': '/fmxlygtest',\n    //                 'kspage': '/fmxly',\n    //                 'ksweb': '/fmxly'\n    //             };\n    //             targetRoute = pathJoin([fmxlyPathnameMAP[window.path], route]);\n    //             if (this.Adapter.getPlatform() === CLIENT.WX) {\n    //                 // 非凯叔同学跳转至凯叔同学项目需要微信授权\n    //                 const ouathMAP = {\n    //                     'mtest': 'oauth_dev',\n    //                     'gtest': 'oauth_gamma',\n    //                     'kspage': 'oauth',\n    //                     'ksweb': 'oauth',\n    //                 };\n    //                 const appidMAP = {\n    //                     'mtest': 'wxb5efd33733b8c21e',\n    //                     'gtest': 'wxbb22392b3fefd76f',\n    //                     'kspage': 'wxbb22392b3fefd76f',\n    //                     'ksweb': 'wxbb22392b3fefd76f'\n    //                 };\n    //                 targetRoute = `/mp/${ouathMAP[window.path]}`;\n    //                 targetRoute += `?${serializeObject({\n    //                     appid: appidMAP[window.path],\n    //                     scope: 'snsapi_userinfo',\n    //                     redirect_uri: `${origin}${pathJoin([fmxlyPathnameMAP[window.path], route])}`,\n    //                     custom: encodeURIComponent(JSON.stringify(params))\n    //                 })}`;\n    //                 return targetRoute;\n    //             }\n    //         }\n    //     } else if (project) { // h5, frequent, ks项目\n    //         switch (project.type) {\n    //             case 'ks':\n    //                 targetRoute = pathJoin([`/${project.name}`, route]);\n    //                 break;\n    //             case 'frequent':\n    //                 targetRoute = pathJoin([`/${project.type}/${project.name}`, window.pathname, route]);\n    //                 break;\n    //             default:\n    //                 targetRoute = pathJoin([`/h5/${project}`, window.pathname, route]);\n    //         }\n    //     }\n\n    //     targetRoute += `${queryString ? '?' + queryString : ''}`;\n    //     return targetRoute;\n    // }\n   \n};\n\n// export const  ","\nimport asyncComponent from './utils';\n\nconst routes = [\n    {\n        path: '/',\n        component: asyncComponent({\n            loader: () => import('Modules/home')\n        })\n    },{\n        path: '/home', // 首页\n        component: asyncComponent({\n            loader: () => import('Modules/home')\n        })\n    },{\n        path: '/detail', // 详情页\n        component: asyncComponent({\n            loader: () => import('Modules/detail')\n        })\n    }\n];\n\nexport default routes;","import React from 'react';\nimport routes from '../routers/routes';\nimport { Route, Router } from 'react-router';\nimport { browserHistory } from './utils';\nimport { pathJoin } from 'Utils/appFunc';\n\nlet pathname = '/';\nif (window.fmxlyPathname) {\n    pathname = window.fmxlyPathname;\n} else {\n    pathname = '';\n}\n\nconst RouteWithSubRoutes = (route) => {\n    return (\n        <Route exact\n            path={pathJoin([pathname, route.path])}\n            render={(props) => {\n                return (<route.component {...props} routes={route.routes} />);\n            }}\n        />\n    );\n};\nconst App = () => {\n    return (\n        <React.Fragment>\n            {routes.map((route, i) => (<RouteWithSubRoutes key={i} {...route} />))}\n        </React.Fragment>\n    );\n};\nconst Root = () => {\n    return (\n        <Router basename={pathname} forceRefresh={true} history={browserHistory}>\n            <App />\n        </Router>\n    );\n};\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport App from './routers/router';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// serviceWorker.unregister();\n","// import React from 'react';\nimport Loadable from 'react-loadable';\nimport { createBrowserHistory } from 'history';\nexport const browserHistory = createBrowserHistory();\n\n/**\n * @typedef {object} Options\n * @property {Promise<Component>} loader 异步载入组件函数\n * @property {number} delay 延时时间(可选)\n */\n/**\n * 生成异步组件\n * @param   {Options} options\n * @return  {Component}\n * @constructor\n */\nconst asyncComponent = (options) => {\n    return Loadable({\n        loading: (props) => {\n            if (props.error) {\n                console.error(props.error);\n            }\n            return null;\n        },\n        ...options\n    });\n};\n\nexport default asyncComponent;\n"],"sourceRoot":""}